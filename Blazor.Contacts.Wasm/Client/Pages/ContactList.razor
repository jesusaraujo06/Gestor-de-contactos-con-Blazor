@page "/"

@inject IContactService ContactService
@inject NavigationManager NavigationManager

<h3>Contacts</h3>

@Message

<RadzenButton 
    Click=@(args => NavigationManager.NavigateTo("/contactdetails")) 
    ButtonStyle="ButtonStyle.Info" 
    Text="New contact" />

@if (contacts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenGrid 
        AllowFiltering="true" 
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        FilterMode="FilterMode.Advanced"
        AllowPaging="true"
        PageSize="4"
        AllowSorting="true"
        Data="@contacts"
        TItem="Contact">

        <Columns>
            <RadzenGridColumn TItem="Contact" Property="FullName" Title="Name"/>
            <RadzenGridColumn TItem="Contact" Property="Phone" Title="Phone"/>
            <RadzenGridColumn TItem="Contact" Property="Address" Title="Address"/>
            <RadzenGridColumn TItem="Contact" Title="Edit" Sortable="false" Filterable="false">
                <Template Context="data">
                    <RadzenLink Path="@($"/contactdetails/{data.Id}")" Text="Edit" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Contact" Title="Delete" Sortable="false" Filterable="false">
                <Template Context="data">
                    <RadzenLink Path="@($"/contactdelete/{data.Id}")" Text="Delete" />
                </Template>
            </RadzenGridColumn>
        </Columns>

    </RadzenGrid>
}


@code {
    IEnumerable<Contact> contacts;
    public string Message { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            contacts = await ContactService.GetAllContacts();
        }
        catch (Exception e)
        {
            Message = $"Error... {e.Message}";
        }
    }
}
